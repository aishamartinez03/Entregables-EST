library(rio)
data= import("https://raw.githubusercontent.com/aishamartinez03/Entregables-EST/main/datafinal.csv")
modelo= lm(scoredemo ~ scorelibeco + scoreparpol + scorepbi, data=data)
summary(modelo)
equatiomatic::extract_eq(modelo, use_coefs = TRUE)
library(knitr)
library(modelsummary)
modelo1=list('OLS asegurados (I)'=modelo)
modelsummary(modelo, title = "Resumen de Regresion Lineal",
stars = TRUE,
output = "kableExtra")
modelo= lm(scoredemo ~  cpiscore + educasec + gini_ind, data=data)
summary(modelo)
equatiomatic::extract_eq(modelo, use_coefs = TRUE)
library(knitr)
library(modelsummary)
modelo2=list('OLS asegurados (I)'=modelo)
modelsummary(modelo, title = "Resumen de Regresion Lineal 2",
stars = TRUE,
output = "kableExtra")
library(stargazer)
stargazer(modelo1,modelo2, type ="text")
modelo= lm(scoredemo ~  cpiscore + educasec + gini_ind + scorelibeco + scoreparpol + scorepbi, data=data)
summary(modelo)
equatiomatic::extract_eq(modelo, use_coefs = TRUE)
library(knitr)
library(modelsummary)
modelo3=list('OLS asegurados (I)'=modelo)
modelsummary(modelo, title = "Resumen de Regresion Lineal",
stars = TRUE,
output = "kableExtra")
dontselect=c("country")
select=setdiff(names(data),dontselect)
theData=data[,select]
library(polycor)
corMatrix=polycor::hetcor(theData)$correlations
library(ggcorrplot)
ggcorrplot(corMatrix)
library(psych)
psych::KMO(corMatrix)
cortest.bartlett(corMatrix,n=nrow(theData))$p.value>0.05
library(matrixcalc)
is.singular.matrix(corMatrix)
fa.parallel(theData, fa = 'fa',correct = T,plot = F)
library(GPArotation)
resfa <- fa(theData,
nfactors = 2,
cor = 'mixed',
rotate = "varimax",
fm="minres")
print(resfa$loadings)
print(resfa$loadings,cutoff = 0.5)
fa.diagram(resfa,main = "Resultados del EFA")
sort(resfa$communality)
sort(resfa$complexity)
library(magrittr)
as.data.frame(resfa$scores)%>%head()
data$scorelibeco=resfa$scores[,1]
data$cpiscore=resfa$scores[,2]
ggplot(data=data, aes(x=scorelibeco,y=scoredemo)) + geom_point() + theme_minimal() + labs(x="Indice de Democracia (original)", y="Indice de Democracia EFA")
ggplot(data=data, aes(x=cpiscore,y=scoredemo)) + geom_point() + theme_minimal() + labs(x="Indice de Democracia (original)", y="Indice de Democracia EFA")
library(BBmisc)
scoredemo=normalize(resfa$scores,
method = "range",
margin=2, # by column
range = c(0, 10))
data$scorelibeco=scoredemo[,1]
data$cpiscore=scoredemo[,2]
ggplot(data=data,aes(x=scorelibeco,y=scoredemo)) + geom_point() + theme_minimal() + labs(x="Indice de Democracia (original)", y="Indice de Democracia EFA (cambiado)")
scoredemo=normalize(resfa$scores,
method = "range",
margin=2, # by column
range = c(0, 10))
data$scorelibeco=scoredemo[,1]
data$cpiscore=scoredemo[,2]
ggplot(data=data,aes(x=cpiscore,y=scoredemo)) + geom_point() + theme_minimal() + labs(x="Indice de Democracia (original)", y="Indice de Democracia EFA (cambiado)")
library(rio)
data= import("https://raw.githubusercontent.com/aishamartinez03/Entregables-EST/main/datafinal.csv")
modelo= lm(scoredemo ~ scorelibeco + scoreparpol + scorepbi, data=data)
summary(modelo)
equatiomatic::extract_eq(modelo, use_coefs = TRUE)
library(knitr)
library(modelsummary)
modelo1=list('OLS asegurados (I)'=modelo)
modelsummary(modelo, title = "Resumen de Regresion Lineal",
stars = TRUE,
output = "kableExtra")
modelo= lm(scoredemo ~  cpiscore + educasec + gini_ind, data=data)
summary(modelo)
equatiomatic::extract_eq(modelo, use_coefs = TRUE)
library(knitr)
library(modelsummary)
modelo2=list('OLS asegurados (I)'=modelo)
modelsummary(modelo, title = "Resumen de Regresion Lineal 2",
stars = TRUE,
output = "kableExtra")
library(stargazer)
stargazer(modelo1,modelo2, type ="text")
modelo= lm(scoredemo ~  cpiscore + educasec + gini_ind + scorelibeco + scoreparpol + scorepbi, data=data)
summary(modelo)
equatiomatic::extract_eq(modelo, use_coefs = TRUE)
library(knitr)
library(modelsummary)
modelo3=list('OLS asegurados (I)'=modelo)
modelsummary(modelo, title = "Resumen de Regresion Lineal",
stars = TRUE,
output = "kableExtra")
dontselect=c("country")
select=setdiff(names(data),dontselect)
theData=data[,select]
library(polycor)
corMatrix=polycor::hetcor(theData)$correlations
library(ggcorrplot)
ggcorrplot(corMatrix)
library(psych)
psych::KMO(corMatrix)
cortest.bartlett(corMatrix,n=nrow(theData))$p.value>0.05
library(matrixcalc)
is.singular.matrix(corMatrix)
fa.parallel(theData, fa = 'fa',correct = T,plot = F)
library(GPArotation)
resfa <- fa(theData,
nfactors = 2,
cor = 'mixed',
rotate = "varimax",
fm="minres")
print(resfa$loadings)
print(resfa$loadings,cutoff = 0.5)
fa.diagram(resfa,main = "Resultados del EFA")
sort(resfa$communality)
sort(resfa$complexity)
library(magrittr)
as.data.frame(resfa$scores)%>%head()
data$scorelibeco=resfa$scores[,1]
data$cpiscore=resfa$scores[,2]
ggplot(data=data, aes(x=scorelibeco,y=scoredemo)) + geom_point() + theme_minimal() + labs(x="Indice de Democracia (original)", y="Indice de Democracia EFA")
ggplot(data=data, aes(x=cpiscore,y=scoredemo)) + geom_point() + theme_minimal() + labs(x="Indice de Democracia (original)", y="Indice de Democracia EFA")
library(BBmisc)
scoredemo=normalize(resfa$scores,
method = "range",
margin=2, # by column
range = c(0, 10))
data$scorelibeco=scoredemo[,1]
data$cpiscore=scoredemo[,2]
ggplot(data=data,aes(x=scorelibeco,y=scoredemo)) + geom_point() + theme_minimal() + labs(x="Indice de Democracia (original)", y="Indice de Democracia EFA (cambiado)")
scoredemo=normalize(resfa$scores,
method = "range",
margin=2, # by column
range = c(0, 10))
data$scorelibeco=scoredemo[,1]
data$cpiscore=scoredemo[,2]
ggplot(data=data,aes(x=cpiscore,y=scoredemo)) + geom_point() + theme_minimal() + labs(x="Indice de Democracia (original)", y="Indice de Democracia EFA (cambiado)")
dataClus=data[,c(2:8)]
row.names(dataClus)=data$country
library(cluster)
g.dist = daisy(dataClus, metric="gower")
fviz_nbclust(dataClus, hcut,diss=g.dist,method = "gap_stat",k.max = 10,verbose = F,hc_func = "diana")
library(profvis)
fviz_nbclust(dataClus, hcut,diss=g.dist,method = "gap_stat",k.max = 10,verbose = F,hc_func = "diana")
library(factoextra)
fviz_nbclust(dataClus, hcut,diss=g.dist,method = "gap_stat",k.max = 10,verbose = F,hc_func = "diana")
set.seed(123)
res.diana <- hcut(g.dist, k = 2,hc_func='diana')
dataClus$diana=res.diana$cluster
head(dataClus,15)%>%kbl%>%kable_styling()
library(kableExtra)
set.seed(123)
res.diana <- hcut(g.dist, k = 2,hc_func='diana')
dataClus$diana=res.diana$cluster
head(dataClus,15)%>%kbl%>%kable_styling()
fviz_dend(res.diana, cex = 0.7, horiz = T, main = "")
fviz_silhouette(res.diana,print.summary = F)
aggregate(.~ diana, data=dataClus,mean)
original=aggregate(.~ diana, data=dataClus,mean)
original[order(original$scoredemo),]
dataClus$diana=dplyr::recode(dataClus$diana, `1` = 2, `2`=1)
data$dianadatapoor=data$Pais
data$dianadata=as.ordered(dataClus$diana)
dataClus$diana=NULL
proyeccion = cmdscale(g.dist, k=2,add = T)
head(proyeccion$points,20)
data$dim1 <- proyeccion$points[,1]
data$dim2 <- proyeccion$points[,2]
library(ggrepel)
base= ggplot(data,aes(x=dim1, y=dim2,label=row.names(dataClus)))
base + geom_text_repel(size=3, max.overlaps = 50,min.segment.length = unit(0, 'lines'))
install.packages("prettydoc")
mapDIS=sf::read_sf("shapes")
library(rio)
data= import("https://raw.githubusercontent.com/aishamartinez03/Entregables-EST/main/datafinal.csv")
modelo= lm(scoredemo ~ scorelibeco + scoreparpol + scorepbi, data=data)
summary(modelo)
equatiomatic::extract_eq(modelo, use_coefs = TRUE)
library(knitr)
library(modelsummary)
modelo1=list('OLS asegurados (I)'=modelo)
modelsummary(modelo, title = "Resumen de Regresion Lineal",
stars = TRUE,
output = "kableExtra")
modelo= lm(scoredemo ~  cpiscore + educasec + gini_ind, data=data)
summary(modelo)
equatiomatic::extract_eq(modelo, use_coefs = TRUE)
library(knitr)
library(modelsummary)
modelo2=list('OLS asegurados (I)'=modelo)
modelsummary(modelo, title = "Resumen de Regresion Lineal 2",
stars = TRUE,
output = "kableExtra")
library(stargazer)
stargazer(modelo1,modelo2, type ="text")
modelo= lm(scoredemo ~  cpiscore + educasec + gini_ind + scorelibeco + scoreparpol + scorepbi, data=data)
summary(modelo)
equatiomatic::extract_eq(modelo, use_coefs = TRUE)
library(knitr)
library(modelsummary)
modelo3=list('OLS asegurados (I)'=modelo)
modelsummary(modelo, title = "Resumen de Regresion Lineal",
stars = TRUE,
output = "kableExtra")
dontselect=c("country")
select=setdiff(names(data),dontselect)
theData=data[,select]
library(polycor)
corMatrix=polycor::hetcor(theData)$correlations
library(ggcorrplot)
ggcorrplot(corMatrix)
library(psych)
psych::KMO(corMatrix)
cortest.bartlett(corMatrix,n=nrow(theData))$p.value>0.05
library(matrixcalc)
is.singular.matrix(corMatrix)
fa.parallel(theData, fa = 'fa',correct = T,plot = F)
library(GPArotation)
resfa <- fa(theData,
nfactors = 2,
cor = 'mixed',
rotate = "varimax",
fm="minres")
print(resfa$loadings)
print(resfa$loadings,cutoff = 0.5)
fa.diagram(resfa,main = "Resultados del EFA")
sort(resfa$communality)
sort(resfa$complexity)
library(magrittr)
as.data.frame(resfa$scores)%>%head()
data$scorelibeco=resfa$scores[,1]
data$cpiscore=resfa$scores[,2]
ggplot(data=data, aes(x=scorelibeco,y=scoredemo)) + geom_point() + theme_minimal() + labs(x="Indice de Democracia (original)", y="Indice de Democracia EFA")
ggplot(data=data, aes(x=cpiscore,y=scoredemo)) + geom_point() + theme_minimal() + labs(x="Indice de Democracia (original)", y="Indice de Democracia EFA")
library(BBmisc)
scoredemo=normalize(resfa$scores,
method = "range",
margin=2, # by column
range = c(0, 10))
data$scorelibeco=scoredemo[,1]
data$cpiscore=scoredemo[,2]
ggplot(data=data,aes(x=scorelibeco,y=scoredemo)) + geom_point() + theme_minimal() + labs(x="Indice de Democracia (original)", y="Indice de Democracia EFA (cambiado)")
scoredemo=normalize(resfa$scores,
method = "range",
margin=2, # by column
range = c(0, 10))
data$scorelibeco=scoredemo[,1]
data$cpiscore=scoredemo[,2]
ggplot(data=data,aes(x=cpiscore,y=scoredemo)) + geom_point() + theme_minimal() + labs(x="Indice de Democracia (original)", y="Indice de Democracia EFA (cambiado)")
dataClus=data[,c(2:8)]
row.names(dataClus)=data$country
library(cluster)
g.dist = daisy(dataClus, metric="gower")
fviz_nbclust(dataClus, hcut,diss=g.dist,method = "gap_stat",k.max = 10,verbose = F,hc_func = "diana")
library(rio)
library(dplyr)
library(ggplot2)
library(cowplot)
library(kableExtra)
library(reshape)
library(DT)
library(equatiomatic)
library(modelsummary)
library(factoextra)
library(cluster)
mapDIS=sf::read_sf("shapes")
mapDIS=sf::read_sf("shapes")
knitr::include_graphics("logoPUCP.png")
knitr::include_graphics("dplyr.png")
library(rio)
library(dplyr)
mydata = import("https://raw.githubusercontent.com/deepanshu88/data/master/sampledata.csv")
sample_n(mydata,5)
sample_frac(mydata,0.1)
x2 = distinct(mydata, Index, .keep_all= TRUE)
mydata2 = select(mydata, Index, State:Y2008) #Los : para indicar un rango de columnas.
mydata = select(mydata, -Index, -State)
mydata3 = select(mydata, starts_with("Y"))
#mydata33 = select(mydata, -starts_with("Y")) Así si quisieramos dropear las que empiezan con Y.
knitr::include_graphics("select.png")
#Nos quedamos con las que acaban en 2:
mydata3 = select(mydata, ends_with("2"))
#O que contengan un elemento en específico:
mydata4 = select(mydata, contains("I"))
mydata = import("https://raw.githubusercontent.com/deepanshu88/data/master/sampledata.csv")
names(mydata)
mydata6 = mydata
colnames(mydata6)[1] ="Index1"
names(mydata6)
mydata7 = filter(mydata, Index == "A")
head(mydata7)
mydata7 = filter(mydata6, Index1 %in% c("A", "C"))
head(mydata7)
mydata7 = filter(mydata6, Index1  == "A" | Index1 == "C") #Recordamos EAP 1 y los operadores lógicos
head(mydata7)
mydata8 = filter(mydata6, Index1 %in% c("A", "C") & Y2002 >= 1300000 )
mydata8$Y2002 #Veamo:
mydata9 = filter(mydata6, Index1 %in% c("A", "C") | Y2002 >= 1300000)
tail(mydata9) #Nótese que hay casos que no son ni A ni C!!
mydata10 = filter(mydata6, !Index1 %in% c("A", "C"))
head(mydata10)
mydata10 = filter(mydata6, grepl("Ar", State))
head(mydata10)
summarise(mydata, Y2015_mean = mean(Y2015),
Y2015_med=median(Y2015))
summarise_at(mydata, vars(Y2005, Y2006), funs(n(), mean, median))
summarise_at(mydata, vars(Y2005, Y2006), list(~n(), ~mean(.), ~median(.)))
dt = mydata %>% select(Index, State) %>% sample_n(10)
dt1 = mydata %>%
select(Index,Y2002,Y2008,Y2010) %>%
group_by(Index) %>%
summarise_at(vars(Y2002,Y2008,Y2010), funs(n(), mean, median)) %>%
filter(Y2002_mean >= 1501744)
#Y así hasta el infinito
head(dt1)
t = mydata %>% filter(Index %in% c("A", "C","I")) %>% group_by(Index)
head(t)
t = mydata %>% filter(Index %in% c("A", "C","I")) %>% group_by(Index) %>%
do(head( . , 2))
head(t)
t = mydata %>% select(Index, Y2015) %>% #Selecciona variables
filter(Index %in% c("A", "C","I")) %>% #Filtra por categorías
group_by(Index) %>% #Agrupa
do(arrange(.,desc(Y2015))) %>%  slice(3) #Ordena y se queda con el tercer valor más alto
head(t)
t = mydata %>%
group_by(Index)%>%
summarise(Mean_2014 = mean(Y2014, na.rm=TRUE),
Mean_2015 = mean(Y2015, na.rm=TRUE)) %>%
arrange(desc(Mean_2015))
head(t)
head(mydata)
library(reshape)
rdata <- melt(mydata, id=c("Index","State"))
head(rdata)
colnames(rdata)[3] = "Year"
rdata$Year = substr(rdata$Year,2,8)
head(rdata)
rdata = rdata %>%
group_by(Index,Year) %>%
summarise(MEDIA = mean(value, na.rm = T)) %>%
filter(Index %in% c("A","C"))
rdata$Year = as.numeric(rdata$Year)
library(ggplot2)
ggplot(rdata, aes(x = Year, y = MEDIA, colour = Index)) +
geom_line()
